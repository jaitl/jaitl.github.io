<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Блог on Jaitl's blog</title><link>https://jaitl.pro/posts/</link><description>Recent content in Блог on Jaitl's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Dec 2022 12:00:00 +0300</lastBuildDate><atom:link href="https://jaitl.pro/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Батчевое сохранение данных в Spring Data JPA</title><link>https://jaitl.pro/russian/2022/12/26/spring-data-jpa-batch/</link><pubDate>Mon, 26 Dec 2022 12:00:00 +0300</pubDate><guid>https://jaitl.pro/russian/2022/12/26/spring-data-jpa-batch/</guid><description>&lt;p>В этой статье я исследую стратегии генерации идентификаторов для сущностей на предмет их совместимости с батчевой вставкой в БД. В качестве ORM используется Spring Data JPA, а в качестве БД - PostgreSQL.&lt;/p></description></item><item><title>Согласованность, Репликация и Базы Данных по CAP</title><link>https://jaitl.pro/russian/2022/01/25/databases-cap/</link><pubDate>Tue, 25 Jan 2022 12:00:00 +0300</pubDate><guid>https://jaitl.pro/russian/2022/01/25/databases-cap/</guid><description>&lt;p>Это ещё одна статья про CAP теорему. Я прочитал множество книг и статей по распределенным системам и в этой статье хочу обобщить полученную информацию.
В статье я рассматриваю модели согласованности данных, типы репликации данных, свойства CAP теоремы, соотношу CAP теорему с типами баз данных.
В конце я подвожу итог в котором объясняю почему CAP теорема является формальным и условным описанием распределенных систем и почему на нее не стоит полагаться.&lt;/p></description></item><item><title>Kotlin Reflection Recipes</title><link>https://jaitl.pro/post/2021/10/01/kotlin-reflection-recipes/</link><pubDate>Fri, 01 Oct 2021 12:00:00 +0300</pubDate><guid>https://jaitl.pro/post/2021/10/01/kotlin-reflection-recipes/</guid><description>&lt;p>Kotlin Reflection has poor documentation so I decided to gather together all code samples that I used when I wrote my library.
I hope this article will help you to save time.&lt;/p>
&lt;p>This article contains a collection of recipes for Kotlin Reflection.
You can find and play with all samples from the article in my &lt;a href="https://github.com/jaitl/kotlin-reflection-examples">Github repository&lt;/a>.&lt;/p></description></item><item><title>Генераторы, Асинхронность, Корутины</title><link>https://jaitl.pro/russian/2021/08/04/coroutines/</link><pubDate>Wed, 04 Aug 2021 12:00:00 +0300</pubDate><guid>https://jaitl.pro/russian/2021/08/04/coroutines/</guid><description>&lt;p>В статье я разбираю основные концепции необходимые для понимания корутин и использование корутин в асинхронном программировании.
Я рассматриваю генераторы, кратко объясняю асинхронные неблокирующие IO операции,
рассказываю как концепция корутин вытекает из генераторов,
а затем как корутины превращаются в примитив для асинхронного программирования.&lt;/p></description></item><item><title>Оптимистические и Пессимистические Блокировки</title><link>https://jaitl.pro/russian/2021/06/10/optimistic_pessimistic_locking/</link><pubDate>Thu, 10 Jun 2021 12:00:00 +0300</pubDate><guid>https://jaitl.pro/russian/2021/06/10/optimistic_pessimistic_locking/</guid><description>&lt;p>Краткий обзор оптимистических и пессимистических блокировок.
В этой заметке рассматриваются основные различия этих двух подходов на примере реализации целочисленного счетчика на &lt;code>Java&lt;/code>.&lt;/p></description></item></channel></rss>